// The function chooseBestSum will take as parameters t (maximum sum of distances, integer >= 0), 
// k (number of towns to visit, k >= 1) and ls (list of distances, all distances are positive or null integers and 
// this list has at least one element). The function returns the "best" sum ie the biggest possible sum of k distances 
// less than or equal to the given limit t, if that sum exists, or otherwise null

//  chooseBestSum(230,3,[ 91, 74, 73, 85, 73, 81, 87 ] => 228
//  chooseBestSum(163,3,[50, 55, 56, 57, 58] => 163
// chooseBestSum(163,2,[50, 55, 56, 57, 58] => 115


////////// better func //////////

function chooseBestSum(t, k, ls) {
  let arr = [];  
    
  function rec(sum, ar, n) {
    if (n == 0) {
      arr.push(sum);
    } else {
      for (let i = 0; i < ar.length; i++) {
        rec(sum+ar[i], ar.slice(i+1), n-1);
      }
    }
  }

  rec(0, ls, k);
    
  var sol = arr.sort( (a, b) => b - a).find( a => a <= t);
  return typeof sol === 'undefined' ? null : sol;
}


////////// faster func //////////

function chooseBestSum(t,k,ls) {
	let time = performance.now()
  	let sets = combos(t,k,ls)
  	function combos(t,size,superset) {
  		var result = [];
  		if (superset.length < size) {return result;}
  		var done = false;
  		var current_combo, distance_back, new_last_index;
  		var indexes = [];
  		var indexes_last = size - 1;
  		var superset_last = superset.length - 1;

  		for (var i = 0; i < size; ++i) {
    		indexes[i] = i;
  		}

  		while (!done) {
    		current_combo = [];
    		for (i = 0; i < size; ++i) {
      			current_combo.push(superset[indexes[i]]);
    		}
    		result.push(current_combo);
    		if (indexes[indexes_last] == superset_last) {
      			done = true;
      			for (i = indexes_last - 1; i > -1 ; --i) {
        			distance_back = indexes_last - i;
        			new_last_index = indexes[indexes_last - distance_back] + distance_back + 1;
        			if (new_last_index <= superset_last) {
          				indexes[indexes_last] = new_last_index;
          				done = false;
          				break;
        			}
      			}		
      			if (!done) {
        			++indexes[indexes_last - distance_back];
        			--distance_back;
        			for (; distance_back; --distance_back) {
          				indexes[indexes_last - distance_back] = indexes[indexes_last - distance_back - 1] + 1;
        			}
      			}
    		} else {++indexes[indexes_last]}
  		}
  		return result
  
	}
  
  
	let r=[]
	for (var i = 0; i < sets.length; ++i) {
		r.push(sets[i].reduce((sum,i)=>sum+i))
	}
	let res = r.filter(cur => cur <= t).sort((a,b)=>a-b).reverse()[0]
	if (res == undefined) return null
	return res
}

////////// recursive //////////


function chooseBestSum(t, k, ls) {
	var time = performance.now();
	var r = [];
	if (ls.length < k) return null
	if (k>8) return null
	if (k==1 && ls.sort((a,b)=>b-a)[0] <= t) return ls.sort((a,b)=>b-a)[0]
	
	function makePermutations(ls, k) { 
    	var current = new Array(k), used = new Array(k), 
    	seen = {}, result = []; 
    	function permute(pos) { 
    		if (pos == k) {  // если поз - 0 равна К
    			if (!seen[current]) { // Check whether we've seen it before. 
    				seen[current] = true; // If not, save it. 
 					result.push(current.slice()); 
    			} 
 				return; 
 			} 
 
    		for (var i = 0; i < ls.length; ++i) { 
    			if (!used[i]) { 
 					used[i] = true; 
 					current[pos] = ls[i]; 
 					permute(pos+1); 
 					used[i] = false;
 				}
			} 
    	}
    	permute(0); 
    	return result; 
	} 
 
	var permutations = makePermutations(ls, k);
	
	for (var i = 0; i < permutations.length; ++i) {
		r.push(permutations[i].reduce((sum,i)=>sum+i))
	}

	let res = r.filter(cur => cur <= t).sort((a,b)=>a-b).reverse()[0]
	if (res == undefined) return null
	return res
}

////////// one more func //////////

function chooseBestSum(t, k, ls) {
  var biggestCount = 0;
  var recurseTowns = function(townsSoFar, lastIndex) {
    townsSoFar = townsSoFar || [];
    //base case
    if (townsSoFar.length === k) {
      var sumDistance = townsSoFar.reduce((a,b)=>a+b);
      if (sumDistance <= t && sumDistance > biggestCount) {
        biggestCount = sumDistance;
      }      
      return; //EJECT
    }
    //recursive case
    for (var i = lastIndex + 1 || 0; i < ls.length; i++) {
      recurseTowns(townsSoFar.concat(ls[i]), i);
    }
  }
  recurseTowns();
  
  return biggestCount || null;
}
